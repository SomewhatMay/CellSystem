Here is how schedules are organized:

0 refers to any possible single-digit number.

Min schedule size:
0 0 0 0 00 00   ~>  ( >= 100,000,000 )


=======================================
------<//[  Evaluation Type  ]\\>------
=======================================
Determines the evaluation type.
--> 0 ( <2 - <10 )
Posibilities -> {
    0 ->    equal              ~> proceed to connection A
    1 ->    not equal          ~> proceed to connection B 
}

====================================
------<//[  Connection A  ]\\>------
====================================
Determines connection A; another action
--> 0 ( <10 )
Posibilities -> {
    X ->     Refers to the position in the schedule of another connection
}

====================================
------<//[  Connection B  ]\\>------
====================================
Determines connection B; another action
--> 0 ( <10 )
Posibilities -> {
    X ->     Refers to the position in the schedule of another connection
}

===================================
------<//[  Action Type  ]\\>------
===================================
Determines the action take during current tick; always takes in two arguments (see Action Inputs)
--> 0 ( <10 )
Posibilities -> {
    X ->     Refers to any of the many actions found in the ./Actions folder
}

======================================
------<//[  Action Input 1  ]\\>------
======================================
Can appear repeatedly; stops when a static value is passed. Always refers to a boolean using the eval type; 
can be an input method (and daisy chained). Determines whether the evaluating action runs or not.

--> 0 ( <3 - <10 )
Posibilities -> {
    0 ->     Static True; action should run
    1 ->     Static False; action should not run
    2 ->     Call a specified input method with another value determined by the assisting bit (see below)
}

------<//[  Assisting Bit  ]\\>------
Always appears right after the previous bit. Determines the input method being called for property Action Type
--> +0 ~> (concatinated is 00) ( <10 )
Posibilities -> {
    X ->     DISREGARDED IF THE Action Type IS A STATIC VALUE; 
                otherwise, is used to locate one of many input methods found int ./Input
                This input will determine whether the method will run or not.
                If it is not a boolean, it will try to use the :ConvertToBoolean() method;
}

======================================
------<//[  Action Input 2  ]\\>------
======================================
Can appear repeatedly; stops when a static value is passed. Can refer to any value; 
can be an input method (and daisy chained). Determines the second argument passed into the current action.

--> 0 ( <2 - <10 )
Posibilities -> {
    0 ->    Calls a specific method determined by the assisting bit (see below)
    1 ->    Passes in a specific string determined by the assisting bit (see below)
}

------<//[  Assisting Bit  ]\\>------
Always appears right after the previous bit. Determines the input method being called for property Action Type
--> +0 ~> (concatinated is 00) ( <10 )
Posibilities -> {
    X ->    Can refer to a method found in the ./Input folder or refer to one of the 62 characters
}

*** BOTH ACTION INPUTS CAN APPEAR MULTIPLE TIMES (TECHNICALLY INFINITELY) ***
*** ONLY STOPS APPEARING ONCE A STATIC VALUE IS PASSED INTO ONE OF THE ARGUMENTS ***